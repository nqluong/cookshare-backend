package com.backend.cookshare.user.repository;

import com.backend.cookshare.user.entity.Notification;
import com.backend.cookshare.user.enums.NotificationType;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.*;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Repository
public interface NotificationRepository extends JpaRepository<Notification, UUID> {

    // ==================== READ QUERIES ====================

    /**
     * L·∫•y danh s√°ch th√¥ng b√°o c·ªßa user (m·ªõi nh·∫•t tr∆∞·ªõc)
     */
    Page<Notification> findByUserIdOrderByCreatedAtDesc(UUID userId, Pageable pageable);

    /**
     * ƒê·∫øm s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc c·ªßa user
     */
    long countByUserIdAndIsReadFalse(UUID userId);

    /**
     * ƒê·∫øm t·∫•t c·∫£ th√¥ng b√°o c·ªßa user
     */
    long countByUserId(UUID userId);

    /**
     * L·∫•y danh s√°ch th√¥ng b√°o theo ki·ªÉu (FOLLOW, COMMENT, SHARE, ...)
     */
    Page<Notification> findByUserIdAndTypeOrderByCreatedAtDesc(
            UUID userId,
            NotificationType type,
            Pageable pageable
    );

    /**
     * L·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc theo ki·ªÉu
     */
    List<Notification> findByUserIdAndTypeAndIsReadFalse(UUID userId, NotificationType type);

    /**
     * Ki·ªÉm tra th√¥ng b√°o c√≥ thu·ªôc v·ªÅ user hay kh√¥ng
     */
    @Query("""
        SELECT CASE WHEN COUNT(n) > 0 THEN true ELSE false END
        FROM Notification n
        WHERE n.notificationId = :notificationId AND n.userId = :userId
    """)
    boolean existsByIdAndUserId(@Param("notificationId") UUID notificationId, @Param("userId") UUID userId);

    /**
     * L·∫•y 10 th√¥ng b√°o g·∫ßn nh·∫•t c·ªßa user
     */
    List<Notification> findTop10ByUserIdOrderByCreatedAtDesc(UUID userId);

    /**
     * L·∫•y t·∫•t c·∫£ th√¥ng b√°o li√™n quan ƒë·∫øn m·ªôt ƒë·ªëi t∆∞·ª£ng (recipe, user, comment, ...)
     */
    List<Notification> findByRelatedIdOrderByCreatedAtDesc(UUID relatedId);

    // ==================== UPDATE QUERIES ====================

    /**
     * ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o c·ªßa user l√† ƒë√£ ƒë·ªçc
     * @return s·ªë b·∫£n ghi ƒë∆∞·ª£c c·∫≠p nh·∫≠t
     */
    @Modifying
    @Query("""
        UPDATE Notification n
        SET n.isRead = true, n.readAt = CURRENT_TIMESTAMP
        WHERE n.userId = :userId AND n.isRead = false
    """)
    int markAllAsReadByUserId(@Param("userId") UUID userId);

    /**
     * ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o c·ªßa m·ªôt ki·ªÉu l√† ƒë√£ ƒë·ªçc
     */
    @Modifying
    @Query("""
        UPDATE Notification n
        SET n.isRead = true, n.readAt = CURRENT_TIMESTAMP
        WHERE n.userId = :userId AND n.type = :type AND n.isRead = false
    """)
    int markAllAsReadByUserIdAndType(@Param("userId") UUID userId, @Param("type") NotificationType type);

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ g·ª≠i (isSent)
     */
    @Modifying
    @Query("""
        UPDATE Notification n
        SET n.isSent = :isSent
        WHERE n.notificationId = :notificationId
    """)
    void updateSentStatus(@Param("notificationId") UUID notificationId, @Param("isSent") Boolean isSent);

    // ==================== DELETE QUERIES ====================

    /**
     * X√≥a t·∫•t c·∫£ th√¥ng b√°o c·ªßa user
     */
    @Modifying
    @Query("DELETE FROM Notification n WHERE n.userId = :userId")
    int deleteByUserId(@Param("userId") UUID userId);

    /**
     * X√≥a t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc c·ªßa user
     */
    @Modifying
    @Query("DELETE FROM Notification n WHERE n.userId = :userId AND n.isRead = true")
    int deleteReadNotificationsByUserId(@Param("userId") UUID userId);

    /**
     * X√≥a th√¥ng b√°o c≈© h∆°n N ng√†y
     * üëâ D√πng LocalDateTime ƒë·ªÉ tr√°nh l·ªói JPQL khi d√πng DATE_SUB
     */
    @Modifying
    @Query("""
        DELETE FROM Notification n
        WHERE n.userId = :userId AND n.createdAt < :limitDate
    """)
    int deleteOldNotificationsByUserId(@Param("userId") UUID userId,
                                       @Param("limitDate") LocalDateTime limitDate);

    /**
     * X√≥a t·∫•t c·∫£ th√¥ng b√°o li√™n quan ƒë·∫øn m·ªôt ƒë·ªëi t∆∞·ª£ng (recipe, user, comment, ...)
     */
    @Modifying
    @Query("DELETE FROM Notification n WHERE n.relatedId = :relatedId")
    int deleteByRelatedId(@Param("relatedId") UUID relatedId);
}
